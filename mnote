#!/bin/bash

set -e

# Default values
CONFIG_DIR="${HOME}/.config/mnote"
DEFAULT_PROMPT_FILE="${CONFIG_DIR}/prompts/summarize"
CONFIG_FILE="${CONFIG_DIR}/config"

# Ensure the config directory and default prompt file exist
mkdir -p "${CONFIG_DIR}/prompts"
if [ ! -f "$DEFAULT_PROMPT_FILE" ]; then
    cat > "$DEFAULT_PROMPT_FILE" <<EOF
Create a detailed summary of the following meeting transcript. Structure the summary according to the main topics discussed and organize the information into logical sections. For each topic, summarize who was involved, what was discussed in detail, what decisions were made, what problems or challenges were identified, and what solutions were proposed or implemented. If specific names are included in the transcript, use them to accurately attribute the statements. Also document all important feedback and planned actions. Pay attention to details on time frames, responsibilities, open questions and any next steps. Conclude the summary with a brief overview of the key findings and next steps.
EOF
fi

# Ensure the config file exists and has default values
if [ ! -f "$CONFIG_FILE" ]; then
    cat > "$CONFIG_FILE" <<EOF
# Transcription API URL
TRANSCRIPTION_API_URL=https://example.com/openai/v1/audio/transcriptions

# Default language setting (auto, en, de, es, fr)
DEFAULT_LANGUAGE=auto

# Language-specific model configuration
# English model (optimized for English content)
WHISPER_MODEL_EN=faster-whisper-medium-en-cpu

# Other language models (using universal model)
WHISPER_MODEL_DE=systran-faster-whisper-large-v3
WHISPER_MODEL_ES=systran-faster-whisper-large-v3
WHISPER_MODEL_FR=systran-faster-whisper-large-v3

# ChatGPT Model for Summarization
CHATGPT_MODEL=gpt-4o-2024-05-13
EOF
fi

# Function to display help
show_help() {
    cat <<EOF
Usage: $0 [OPTIONS] <video_directory>

mnote processes video files in the specified directory to:
1. Extract audio from each video file.
2. Transcribe the audio using a transcription API.
3. Generate a detailed summary of the transcription based on a specified prompt.

Options:
  --prompt <prompt_name>  Specify the name of the prompt file located in ~/.config/mnote/prompts.
                          Defaults to "summarize".
  --language <lang_code>  Specify the language code (de, es, fr, or auto).
                          Defaults to "auto" for automatic detection.
  --force                 Force rebuild of transcription and summary files.
  --help                  Show this help message and exit.

Dependencies:
  - ffmpeg   : Required for extracting audio from video files.
  - curl     : Required for making API requests to the transcription service.
  - jq       : Required for parsing JSON output from the transcription API.
  - chatgpt  : Required for summarizing the transcription. Install it from:
                https://github.com/kardolus/chatgpt-cli

Environment Variables:
  - OPENAI_API_KEY : Required by the chatgpt CLI tool to authenticate with OpenAI's API.
                     You must export this variable before running the script:
                     export OPENAI_API_KEY="your_openai_api_key"

Configuration:
  - Configuration settings are stored in ${CONFIG_FILE}
  - Default language and language-specific models can be configured
  - Each language can have its own model specified

Configuration File Settings:
  TRANSCRIPTION_API_URL     : URL for the transcription API
  DEFAULT_LANGUAGE         : Default language for transcription (auto, en, de, es, fr)
  WHISPER_MODEL_<LANG>    : Language-specific model configuration (e.g., WHISPER_MODEL_EN)
  CHATGPT_MODEL           : ChatGPT model for summarization (e.g., gpt-4o-2024-05-13)

Default Model Configuration:
  - English (en): Uses faster-whisper-medium-en-cpu model optimized for English
  - Other languages: Use systran-faster-whisper-large-v3 universal model
  - Auto-detection: Uses English model as default, switches based on detected language

Note:
  The transcription service is based on KubeAI and is installed in a Kubernetes cluster via a Helm chart.
  Ensure your Kubernetes cluster is configured and the service is deployed before using this script.
  The script outputs the language and model used during transcription for better visibility.

Prompt Management:
  - mnote looks for prompt files in the ~/.config/mnote/prompts folder.
  - The default prompt file is "summarize", created automatically if it doesn't exist.
  - To add custom prompts, create a new file in ~/.config/mnote/prompts with the desired content.

Examples:
  Default usage (with "summarize" prompt):
    $0 /path/to/video/files

  Specify a custom prompt (e.g., "meeting"):
    $0 --prompt meeting /path/to/video/files

  Specify language for transcription:
    $0 --language de /path/to/video/files     # German
    $0 --language es /path/to/video/files     # Spanish
    $0 --language fr /path/to/video/files     # French
    $0 --language auto /path/to/video/files   # Auto-detect language

  Force rebuild existing files:
    $0 --force /path/to/video/files                    # Rebuild all files
    $0 --force --language de /path/to/video/files      # Force rebuild with German
    $0 --force --prompt meeting /path/to/video/files   # Force rebuild with custom prompt
    $0 --force --language auto --prompt meeting /path/to/video/files  # Force rebuild with auto-detection
EOF
}

# Function to check required commands
check_commands() {
    local missing=()
    for cmd in ffmpeg curl jq chatgpt; do
        if ! command -v "$cmd" &>/dev/null; then
            missing+=("$cmd")
        fi
    done

    if [ ${#missing[@]} -ne 0 ]; then
        echo "Error: The following required commands are not installed or not in PATH:"
        for cmd in "${missing[@]}"; do
            echo "  - $cmd"
        done
        echo "For chatgpt, install it from: https://github.com/kardolus/chatgpt-cli"
        exit 1
    fi
}

# Function to check OPENAI_API_KEY
check_openai_api_key() {
    if [ -z "$OPENAI_API_KEY" ]; then
        echo "Error: The environment variable OPENAI_API_KEY is not set."
        echo "Please set it to your OpenAI API key:"
        echo "  export OPENAI_API_KEY=\"your_openai_api_key\""
        exit 1
    fi
}

# Load configuration
load_config() {
    if [ -f "$CONFIG_FILE" ]; then
        source "$CONFIG_FILE"
    else
        echo "Error: Configuration file not found at $CONFIG_FILE"
        exit 1
    fi

    # Ensure all required config values are set
    if [ -z "$TRANSCRIPTION_API_URL" ] || [ -z "$CHATGPT_MODEL" ] || [ -z "$DEFAULT_LANGUAGE" ]; then
        echo "Error: Missing required configuration in $CONFIG_FILE"
        echo "Ensure the following are set:"
        echo "  TRANSCRIPTION_API_URL, CHATGPT_MODEL, DEFAULT_LANGUAGE"
        exit 1
    fi
}

# Function to select appropriate Whisper model based on language
select_whisper_model() {
    local lang="$1"
    local model_var="WHISPER_MODEL_${lang^^}"

    # If language is auto, use English model as default
    if [ "$lang" = "auto" ]; then
        echo "$WHISPER_MODEL_EN"
        return
    fi

    # Check for language-specific model
    if [ -n "${!model_var}" ]; then
        echo "${!model_var}"
    else
        # Use universal model for unknown languages
        echo "systran-faster-whisper-large-v3"
    fi
}

# Parse arguments
PROMPT_NAME="summarize"
LANGUAGE="auto"
FORCE_REBUILD=false
VIDEO_DIR=""

while [[ $# -gt 0 ]]; do
    case $1 in
        --prompt)
            PROMPT_NAME="$2"
            shift 2
            ;;
        --language)
            LANGUAGE="$2"
            shift 2
            ;;
        --force)
            FORCE_REBUILD=true
            shift
            ;;
        --help)
            show_help
            exit 0
            ;;
        *)
            VIDEO_DIR="$1"
            shift
            ;;
    esac
done

# Ensure video directory is provided and exists
if [ -z "$VIDEO_DIR" ] || [ ! -d "$VIDEO_DIR" ]; then
    echo "Error: Video directory not specified or does not exist."
    show_help
    exit 1
fi

# Check if required commands are installed
check_commands

# Check if OPENAI_API_KEY is set
check_openai_api_key

# Load configuration
load_config

# Locate the prompt file
PROMPT_FILE="${CONFIG_DIR}/prompts/${PROMPT_NAME}"
if [ ! -f "$PROMPT_FILE" ]; then
    echo "Error: Prompt file not found: $PROMPT_FILE"
    exit 1
fi

# Iterate through all video files in the directory
for VIDEO in "$VIDEO_DIR"/*.{mp4,mkv,avi,mov}; do
    # Skip if no matching files are found
    [ -e "$VIDEO" ] || continue

    # Extract filename and directory details
    filename="${VIDEO##*/}"
    TITLE="${filename%.*}"
    DIR=$(dirname "${VIDEO}")

    # Extract audio if not already extracted
    if [ -f "${DIR}/${TITLE}.mp3" ] && [ "$FORCE_REBUILD" = false ]; then
        echo "Audio file for ${TITLE}.mp3 already exists"
    else
        echo "Extracting audio from ${filename}"
        ffmpeg -i "${VIDEO}" -vn -acodec libmp3lame -q:a 5 "${DIR}/${TITLE}.mp3"
    fi

    # Select appropriate model based on language
    SELECTED_MODEL=$(select_whisper_model "$LANGUAGE")
    LANG_DISPLAY=$([ "$LANGUAGE" = "auto" ] && echo "auto-detect" || echo "$LANGUAGE")

    # Perform transcription if not already done
    if [ -f "${DIR}/${TITLE}.json" ] && [ "$FORCE_REBUILD" = false ]; then
        echo "Transcription for ${TITLE}.json already exists (Language: ${LANG_DISPLAY}, Model: ${SELECTED_MODEL})"
    else
        echo "Transcribing audio from ${filename} (Language: ${LANG_DISPLAY}, Model: ${SELECTED_MODEL})"
        if [ "$LANGUAGE" = "auto" ]; then
            curl "$TRANSCRIPTION_API_URL" \
                -F "file=@${DIR}/${TITLE}.mp3" \
                -F "model=${SELECTED_MODEL}" > "${DIR}/${TITLE}.json"
        else
            curl "$TRANSCRIPTION_API_URL" \
                -F "file=@${DIR}/${TITLE}.mp3" \
                -F "language=${LANGUAGE}" \
                -F "model=${SELECTED_MODEL}" > "${DIR}/${TITLE}.json"
        fi
    fi

    # Generate a text file from the transcription
    if [ "$PROMPT_NAME" = "summarize" ]; then
        OUTPUT_FILE="${DIR}/${TITLE}.md"
    else
        OUTPUT_FILE="${DIR}/${TITLE}_${PROMPT_NAME}.md"
    fi

    if [ -f "$OUTPUT_FILE" ] && [ "$FORCE_REBUILD" = false ]; then
        echo "Summary file ${OUTPUT_FILE} already exists, skipping ChatGPT processing"
    else
        echo "Generating text file for ${filename} at ${OUTPUT_FILE}"
        cat "${DIR}/${TITLE}.json" | jq ".text" | chatgpt --model "$CHATGPT_MODEL" --prompt "$PROMPT_FILE" > "$OUTPUT_FILE"
    fi
done

echo "Processing complete. Used language: ${LANG_DISPLAY}, model: ${SELECTED_MODEL}"
